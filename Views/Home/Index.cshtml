@using Smart_OrdreMission.Models
@model PersonFormViewModel
@using System.Text.Json


<h2 class="text-2xl font-bold mb-4">List of Persons</h2>

<table class="table-auto w-full border border-collapse border-gray-300">
    <thead class="bg-orange-100 text-left">
        <tr>
            <th class="border px-4 py-2">Name</th>
            <th class="border px-4 py-2">Matricule SAP</th>
            <th class="border px-4 py-2">Echelle</th>
            <th class="border px-4 py-2">Fonction</th>
            <th class="border px-4 py-2">Affectation</th>
            <th class="border px-4 py-2">itineraire</th>


        </tr>
    </thead>
    <tbody>
        @foreach (var person in Model.Persons)
        {
            <tr class="hover:bg-orange-50">
                <td class="border px-4 py-2">@person.Name</td>
                <td class="border px-4 py-2">@person.MatriculeSAP</td>
                <td class="border px-4 py-2">@person.Echelle</td>
                <td class="border px-4 py-2">@person.Fonction</td>
                <td class="border px-4 py-2">@person.Affectation</td>
                <td class="border px-4 py-2">@person.itinerary.Itineraire</td>


            </tr>
        }
    </tbody>
</table>

<body class="bg-gray-100 text-gray-900 tracking-wider leading-normal">

    @await Html.PartialAsync("_NavHeader")

    <!--Container-->
    <div class="container w-full flex flex-wrap mx-auto px-2 pt-8 lg:pt-16 mt-16">
        @await Html.PartialAsync("_DropDownMenuSections")


        <!--Section container-->
        <section class="w-full lg:w-4/5">

            <!--Title-->
            <h1 class="flex items-center font-sans font-bold break-normal text-gray-700 px-2 text-xl mt-12 lg:mt-0 md:text-2xl">
                Multi Section Form with Scrollspy
            </h1>

            <!--divider-->
            <hr class="bg-gray-300 my-12">

            <!--Title-->
            @await Html.PartialAsync("_Disclaimer")

            <hr class="bg-gray-300 my-12">

           <form asp-action="SavePerson" asp-controller="Home" method="post">


            @await Html.PartialAsync("_InformationSection")



            <hr class="bg-gray-300 my-12">

            <!--Title-->
            @await Html.PartialAsync("_TimeInfo")

             


            </form>

            <hr class="bg-gray-300 my-12">

            @await Html.PartialAsync("_Section4")

            <hr class="bg-gray-300 my-12">

            @await Html.PartialAsync("_ExportMissionData")


        </section>
        <!--/Section container-->
        <!--Back link -->
        <div class="w-full lg:w-4/5 lg:ml-auto text-base md:text-sm text-gray-600 px-4 py-24 mb-12">
            <span class="text-base text-yellow-600 font-bold">&lt;</span> <a href="#" class="text-base md:text-sm text-yellow-600 font-bold no-underline hover:underline">Back link</a>
        </div>

    </div>
    <!--/container-->


    <!-- Toggle dropdown list -->
    <script>
        /*https://gist.github.com/slavapas/593e8e50cf4cc16ac972afcbad4f70c8*/

        var userMenuDiv = document.getElementById("userMenu");
        var userMenu = document.getElementById("userButton");

        var helpMenuDiv = document.getElementById("menu-content");
        var helpMenu = document.getElementById("menu-toggle");

        document.onclick = check;

        function check(e) {
            var target = (e && e.target) || (event && event.srcElement);

            //User Menu
            if (!checkParent(target, userMenuDiv)) {
                // click NOT on the menu
                if (checkParent(target, userMenu)) {
                    // click on the link
                    if (userMenuDiv.classList.contains("invisible")) {
                        userMenuDiv.classList.remove("invisible");
                    } else { userMenuDiv.classList.add("invisible"); }
                } else {
                    // click both outside link and outside menu, hide menu
                    userMenuDiv.classList.add("invisible");
                }
            }

            //Help Menu
            if (!checkParent(target, helpMenuDiv)) {
                // click NOT on the menu
                if (checkParent(target, helpMenu)) {
                    // click on the link
                    if (helpMenuDiv.classList.contains("hidden")) {
                        helpMenuDiv.classList.remove("hidden");
                    } else { helpMenuDiv.classList.add("hidden"); }
                } else {
                    // click both outside link and outside menu, hide menu
                    helpMenuDiv.classList.add("hidden");
                }
            }

        }

        function checkParent(t, elm) {
            while (t.parentNode) {
                if (t == elm) { return true; }
                t = t.parentNode;
            }
            return false;
        }

    </script>

    <!-- jQuery -->
    <script type="text/javascript" src="https://code.jquery.com/jquery-3.4.1.min.js"></script>

    <!-- Scroll Spy -->
    <script>
        /* http://jsfiddle.net/LwLBx/ */

        // Cache selectors
        var lastId,
            topMenu = $("#menu-content"),
            topMenuHeight = topMenu.outerHeight() + 175,
            // All list items
            menuItems = topMenu.find("a"),
            // Anchors corresponding to menu items
            scrollItems = menuItems.map(function () {
                var item = $($(this).attr("href"));
                if (item.length) { return item; }
            });

        // Bind click handler to menu items
        // so we can get a fancy scroll animation
        menuItems.click(function (e) {
            var href = $(this).attr("href"),
                offsetTop = href === "#" ? 0 : $(href).offset().top - topMenuHeight + 1;
            $('html, body').stop().animate({
                scrollTop: offsetTop
            }, 300);
            if (!helpMenuDiv.classList.contains("hidden")) {
                helpMenuDiv.classList.add("hidden");
            }
            e.preventDefault();
        });

        // Bind to scroll
        $(window).scroll(function () {
            // Get container scroll position
            var fromTop = $(this).scrollTop() + topMenuHeight;

            // Get id of current scroll item
            var cur = scrollItems.map(function () {
                if ($(this).offset().top < fromTop)
                    return this;
            });
            // Get the id of the current element
            cur = cur[cur.length - 1];
            var id = cur && cur.length ? cur[0].id : "";

            if (lastId !== id) {
                lastId = id;
                // Set/remove active class
                menuItems
                    .parent().removeClass("font-bold border-yellow-600")
                    .end().filter("[href='#" + id + "']").parent().addClass("font-bold border-yellow-600");
            }
        });

    </script>

    <script src="~/js/person-selection.js" asp-append-version="true"></script>

    </body>